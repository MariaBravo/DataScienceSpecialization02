?axis
?text
?lines
?lpoints
?axis
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
trellis.par.set
?trellis.par.set
?print.tellis
?par
?splom
library(datasets)
data(airquality)
head(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = factor(Month) ~.)
airquality
? facets
library(ggplot2)
? facets
qplot(Wind, Ozone, data = airquality, facets = factor(Month) ~.)
airquality
str(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, smooth = "loess")
?smooth
qplot(votes, rating, data = movies) + geom_smooth()
?geom_smooth
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
pnorm(70,80,10)
qnorm(0.95,1100,75)
qnorm(0.95,1100,7.5)
r6 <- pbinom(4, 5, 0.5,)
r6 <- pbinom(4, 5, 0.5)
pbinom(4, 5, 0.5)
pbinom(4, 5, 0.5, lower.tail=F)
pbinom(3, 5, 0.5, lower.tail=F)
pbinom(4, prob = .5, size = 6, lower.tail = TRUE)
pbinom(4, 6, 0.5, lower.tail = TRUE)
pbinom(3, 5, 0.5, lower.tail=TRUE)
pbinom(3, 5, 0.5, lower.tail=FALSE)
ppois(10,15)
ppois(3, lambda = 2.5 * 4)
ppois(10,15)
library(data.table)
f <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", f)
datZero <- data.table(read.csv(bzfile(f)))
# cutting years until 1996 and comments, adding formatted date
dat1 <- datZero[year(strptime( datZero[["BGN_DATE"]] , "%m/%d/%Y %H:%M:%S")) >= 1996]
dat1 <- dat1[, c("STATE__", "BGN_DATE", "COUNTY", "COUNTYNAME", "STATE",
"EVTYPE", "END_DATE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP") , with = FALSE]
dat1 <- dat1[, bgn_date2:= as.Date(strptime( dat1$BGN_DATE, "%m/%d/%Y %H:%M:%S")) ]
dat1 <- dat1[, bgn_year:= year(bgn_date2) ]
dat1[as.character(dat1$PROPDMGEXP) == "0" & "PROPDMG" > 0, propdmg2 := PROPDMG*1]
dat1[as.character(dat1$PROPDMGEXP) == "K" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000]
dat1[as.character(dat1$PROPDMGEXP) == "M" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000]
dat1[as.character(dat1$PROPDMGEXP) == "B" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000000]
dat1[as.character(dat1$CROPDMGEXP) == "0" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1]
dat1[as.character(dat1$CROPDMGEXP) == "K" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000]
dat1[as.character(dat1$CROPDMGEXP) == "M" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000]
dat1[as.character(dat1$CROPDMGEXP) == "B" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000000]
datTotEvent <- dat1[order(EVTYPE, bgn_year)]
datTotEvent <- datTotEvent[, by="EVTYPE",
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotEvent <- unique(datTotEvent, by = "EVTYPE")
datTotYear <- dat1[order(bgn_year, EVTYPE)]
datTotYear <- datTotYear[, by=year(dat1$bgn_date2),
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotYear <- unique(datTotYear, by = "bgn_year")
datQ1 <- datTotEvent[order(totFATALITIES, totINJURIES, decreasing = TRUE)]
datQ1 <- datQ1[totFATALITIES > 0,]
datQ1 <- datQ1[order(totFATALITIES, decreasing = TRUE)]
levelsQ1 <- datQ1[,c("EVTYPE", "totFATALITIES"), with=FALSE]
levelsQ1 <- levelsQ1[order(totFATALITIES, decreasing=TRUE)]
levelsQ1 <- levelsQ1[["EVTYPE"]]
datQ1 <- transform(datQ1, EVTYPE = factor(EVTYPE, levels = levelsQ1))
datQ1 <- head(datQ1,10)
datQ2 <- datTotEvent[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
datQ2 <- datQ2[totPROPDMG > 0 | totCROPDMG > 0,]
datQ2 <- datQ2[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
levelsQ2 <- datQ2[,c("EVTYPE", "totPROPDMG", "totCROPDMG"), with=FALSE]
levelsQ2 <- levelsQ2[order(totPROPDMG, totCROPDMG, decreasing=TRUE)]
levelsQ2 <- levelsQ2[["EVTYPE"]]
datQ2 <- transform(datQ2, EVTYPE = factor(EVTYPE, levels = levelsQ2))
datQ2 <- head(datQ2,10)
View(datQ1)
View(dat1)
head(datZero)
dat1 <- datZero[year(strptime( datZero[["BGN_DATE"]] , "%m/%d/%Y %H:%M:%S")) >= 1996]
dat1 <- dat1[, c("LATITUDE", "LONGITUDE", "STATE__", "BGN_DATE", "COUNTY", "COUNTYNAME", "STATE",
"EVTYPE", "END_DATE", "FATALITIES", "INJURIES", "PROPDMG",
"PROPDMGEXP", "CROPDMG", "CROPDMGEXP") , with = FALSE]
dat1 <- dat1[, bgn_date2:= as.Date(strptime( dat1$BGN_DATE, "%m/%d/%Y %H:%M:%S")) ]
dat1 <- dat1[, bgn_year:= year(bgn_date2) ]
dat1[as.character(dat1$PROPDMGEXP) == "0" & "PROPDMG" > 0, propdmg2 := PROPDMG*1]
dat1[as.character(dat1$PROPDMGEXP) == "K" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000]
dat1[as.character(dat1$PROPDMGEXP) == "M" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000]
dat1[as.character(dat1$PROPDMGEXP) == "B" & "PROPDMG" > 0, propdmg2 := PROPDMG*1000000000]
dat1[as.character(dat1$CROPDMGEXP) == "0" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1]
dat1[as.character(dat1$CROPDMGEXP) == "K" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000]
dat1[as.character(dat1$CROPDMGEXP) == "M" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000]
dat1[as.character(dat1$CROPDMGEXP) == "B" & "CROPDMG" > 0, cropdmg2 := CROPDMG*1000000000]
datTotEvent <- dat1[order(EVTYPE, bgn_year)]
datTotEvent <- datTotEvent[, by="EVTYPE",
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotEvent <- unique(datTotEvent, by = "EVTYPE")
datTotYear <- dat1[order(bgn_year, EVTYPE)]
datTotYear <- datTotYear[, by=year(dat1$bgn_date2),
`:=` (totFATALITIES=sum(FATALITIES), totINJURIES=sum(INJURIES),
totPROPDMG=sum(propdmg2), totCROPDMG=sum(cropdmg2))]
datTotYear <- unique(datTotYear, by = "bgn_year")
datQ1 <- datTotEvent[order(totFATALITIES, totINJURIES, decreasing = TRUE)]
datQ1 <- datQ1[totFATALITIES > 0,]
datQ1 <- datQ1[order(totFATALITIES, decreasing = TRUE)]
levelsQ1 <- datQ1[,c("EVTYPE", "totFATALITIES"), with=FALSE]
levelsQ1 <- levelsQ1[order(totFATALITIES, decreasing=TRUE)]
levelsQ1 <- levelsQ1[["EVTYPE"]]
datQ1 <- transform(datQ1, EVTYPE = factor(EVTYPE, levels = levelsQ1))
datQ1 <- head(datQ1,10)
datQ2 <- datTotEvent[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
datQ2 <- datQ2[totPROPDMG > 0 | totCROPDMG > 0,]
datQ2 <- datQ2[order(totPROPDMG, totCROPDMG, decreasing = TRUE)]
levelsQ2 <- datQ2[,c("EVTYPE", "totPROPDMG", "totCROPDMG"), with=FALSE]
levelsQ2 <- levelsQ2[order(totPROPDMG, totCROPDMG, decreasing=TRUE)]
levelsQ2 <- levelsQ2[["EVTYPE"]]
datQ2 <- transform(datQ2, EVTYPE = factor(EVTYPE, levels = levelsQ2))
datQ2 <- head(datQ2,10)
View(datQ2)
NAMES(DAT1)
names(dat1)
dat1[, LATITUDE > 0]
Z <- dat1[, LATITUDE > 0]
sum(Z)
Z
sum(Z)
str(Z)
View(dat1)
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.95, n-1) * s/sqrt(n)
library(datasets); data(mtcars)
round(t.test(mtcars$mpg)$conf.int)
attr
t.test(mtcars$mpg)$conf.int
round(mn + c(-1,1)*qt(0.95, n-1) * s/sqrt(n))
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.95, n-1) * s/sqrt(n)
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.95, n) * s/sqrt(n)
mn <- 1100
n <- 9
s <- 30
mn + c(-1,1)*qt(0.025, n-1) * s/sqrt(n)
# Q4 T conf.int
pooledVariance <- function(v, n, sq.root = FALSE){
res <- sum((n-1)*v)/(sum(n) - 2)
if (sq.root) {
return(sqrt(res))
}
return(res)
}
confintPool <- function(m, v, n){
spool <- pooledVariance(v, n, T)
res <- m + c(-1, 1)*spool*qt(0.975, sum(n)-2)*sqrt(sum(1/n))
return(res)
}
confintPool
qnorm(0.95,1100,sqrt(75/100))
qnorm(0.95,mean=1100,sd = 75/10)
pbinom(3,size=5,prob=0.5)
pbinom(3,size=5,prob=0.5, lower.tail=FALSE)
ppois(10, 15)
choose(9,3)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
install.packages("usingR")
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
install.packages("UsingR")
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(UsingR); data(galton)
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
library(manipulate)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
galton
summary(galton)
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.1))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.1))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.1))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.01))
plot(galton$parent,galton$child,pch=19,col="blue")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x[1]
mean(x)
m <- mean(x)
x[1]-m
(x[1]-m)^2
((x[1]-m)^2)*y[1]
((x[1]-m)^2)*w[1]
apply
apply(((x-m)^2)*w, sum)
apply( ( (x-m) ^2 )*w, sum)
apply( ( (x-m) ^2 )*w, FUN=sum)
((x[1]-m)^2)*w[1]
((x[1]-m)^2)*w[1] + ((x[2]-m)^2)*w[2] + ((x[3]-m)^2)*w[3] + ((x[4]-m)^2)*w[4]
lm(x)
lm
lm ( sum(( (x-mean(x)) ^2 )*w) ~ 0)
lm ( sum(( (x-mean(x)) ^2 )*w) ~ 0, data = x)
df <- data.frame(x)
df
lm ( sum(( (x-mean(x)) ^2 )*w) ~ 0, data = x)
df <- data.frame(x, w)
df
lm ( sum(( (x-mean(x)) ^2 )*w) ~ 0, data = df)
zz <- lm ( sum(( (x-mean(x)) ^2 )*w) ~ 0, data = df)
zz
lm ( sum(( (x-mean(x)) ^2 )*w) ~ 0)
lm ( sum(x)*w) ~ 0)
lm ( sum(x)*w ~ 0)
lm ( x ~ 0)
x
lm ( x ~ 0, data=df)
df
lm ( x ~ 0, data=df)
lm ( sum(x-mean(X)) ~ 0, data=df)
lm ( sum(x-mean(x)) ~ 0, data=df)
lm ( (sum(x-mean(x))^2) ~ 0, data=df)
68+119
68+19
pi
32*32 - pi * (16)^2
32*32
pi * (16)^2
16*16
(32*32 - pi * (16)^2 )/4
2/3 -1/6
2/3 +1/6
2/3 + 1/6
2/3 + 1/6 - 5/6
16.5/6.60
2.5 *12
16.50 /6.6
23.7/2.5
23.7/2.5 -6.6
(23.7/2.5 -6.6)/12
6.6/12
12*2.5
with(df, x-)
with(df, x-w)
with(df, w*(x-m)^2)
c <- with(df, w*(x-m)^2)
min(c)
lm(formula = I(child - mean(child)) ~ I(parent - mean(parent)) -
1, data = galton)
lm(formula = I(x - mean(x)) ~ 0, data = df)
df$z <- df$x*df$w
df
mean(df$z)
sum(df$z)
sum(df$w)
sum(df$z)/sum(df$w)
rm(x)
rm(w)
rm(y)
rm(c)
rm(zz)
rm(m)
rm(df)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x1 <- x-mean(x)
y1 <- y-mean(y)
lm(y1~x1)
x*y
sum(x*y)
sum(x^2)
sum(x*y)/sum(x^2)
lm(y ~x - 1)
lm(y~x)
x1 <- x-mean(x)
y1 <- y-mean(y)
lm(y1~x1)
data(mtcars)
y <- galton$mpg
x <- galton$weight
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
y <- galton$mpg
x <- galton$weight
beta1 <- cor(y, x) * sd(y) / sd(x)
x
y <- mtcars$mpg
x <- mtcars$weight
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
mtcars
summary(mtcars)
summary(mtcars)
y <- mtcars$mpg
x <- mtcars$weight
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
y
x
y <- mtcars$mpg
x <- mtcars$wt
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
mtcars
mtcars?
?mtcars
y <- mtcars$mpg
x <- mtcars$wt
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
beta1
0.4*1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
std(x)
sd(x)
m <- mean(x)
sd <- sd(x)
(8.58 - m)/sd
rm(beta0)
rm(beta1)
rm(m)
rm(sd)
rm(x)
rm(y)
rm(y1)
rm(x1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
y <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
rm(beta0)
rm(beta1)
rm(x)
rm(y)
y <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
x <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~x - 1)
lm(y~x)
lm(y~x-1)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
coef(lm(y~x))
rm(x)
rm(y)
rm(beta0)
rm(beta1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum(x)
sum(x)/10
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(UsingR)
data(galton)
renderPlot()
renderPlot({
hist(galton$child, xlab='child height', col='lightblue',main='Histogram')
mu <- input$mu
lines(c(mu, mu), c(0, 200),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
})
setwd("C:/Users/Luchy/Desktop/Coursera/Developing data products/shiny")
library(shiny)
runApp()
runApp("shiny", port=8100)
runApp(port=8100)
runApp()
setwd("C:/Users/Luchy/Desktop/Coursera/Developing data products")
runApp("shiny", port=8100)
runApp (appDir=getwd(),
port=NULL,
launch.browser=getOption('shiny.launch.browser',
interactive()), interactive()),host=getOption('shiny.host', '127.0.0.1'),
workerId="", quiet=FALSE)
runApp (appDir=getwd(),
port=NULL,
launch.browser=getOption('shiny.launch.browser',
interactive()), interactive()),host=getOption('shiny.host', '127.0.0.1'),
workerId="", quiet=FALSE)
runApp (appDir=getwd(),
port=NULL,
launch.browser=getOption('shiny.launch.browser',interactive()),
interactive())
runApp (appDir="shiny",
port=NULL,
launch.browser=getOption('shiny.launch.browser',interactive()),
interactive())
runApp (appDir="shiny",
port=NULL,host="127.0.0.1",
launch.browser=getOption('shiny.launch.browser',interactive()),
interactive())
runApp (appDir="shiny",
port=NULL,host="127.0.0.1",
launch.browser=getOption('shiny.launch.browser',interactive()),
)
runApp(list(
ui = bootstrapPage(
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output) {
output$plot <- renderPlot({ hist(runif(input$n)) })
}
))
runApp
(list
(
ui = bootstrapPage
(
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output)
{
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
)
runApp
(list
(
ui = bootstrapPage
(
numericInput('n', 'Number of obs', 100),
plotOutput('plot')
),
server = function(input, output)
{
output$plot <- renderPlot({ hist(runif(input$n)) })
}
)
)
