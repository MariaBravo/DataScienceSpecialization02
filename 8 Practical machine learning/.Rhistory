library("swirl")
swirl()
install.packages("swirl")
install.packages("swirl")
library("swirl")
swirl()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ x)
f <- lm(y ~ x)
t.test(f)
f
summary(f)
beta1 <- cor(x,y)
beta1
beta1 <- cor(x,y)*sd(y)
beta1
beta1 <- cor(x,y)*sd(y)/sd(x)
beta1
t.test(cor(x,y)*sd(y)/sd(x))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
f <- lm(y ~ x)
f
summary(f)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
?caret
??caret
library(caret)
set.seed(3456)
trainIndex <- createDataPartition(iris$Species, p = .8,
list = FALSE,
times = 1)
head(trainIndex)
Resample1
[1,]         1
[2,]         2
[3,]         4
[4,]         5
[5,]         6
[6,]         8
irisTrain <- iris[ trainIndex,]
irisTest  <- iris[-trainIndex,]
iris
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
source('~/.active-rstudio-document', echo=TRUE)
con.var <- runif(100,0,10)
cut(con.var, breaks = 3, labels = c("small", "medium", "large"))
plot(CompressiveStrenght, col = con.var)
plot(training$CompressiveStrenght, col = con.var)
plot(training$CompressiveStrenght, col = con.var)
plot(testing$CompressiveStrenght, col = con.var)
plot(testing, col = con.var)
plot(testing)
plot(testing$CompressiveStrength,col = con.var)
plot(training$CompressiveStrength,col = con.var)
with(training, plot(x=CompressiveStrength, y=Age,col = con.var)
with(training, plot(x=CompressiveStrength, y=Age,col = con.var) )
(training, plot(x=CompressiveStrength, y=FlyAsh,col = con.var) )
with(training, plot(x=CompressiveStrength, y=FlyAsh,col = con.var) )
with(training, xyplot(x=CompressiveStrength, y=FlyAsh,col = con.var) )
with(training, xyplot(CompressiveStrength ~ FlyAsh,col = con.var) )
str(training)
summary(training)
R.version.string
library(swirl)
swirl()
plot (child ~ parent, galton)
plot (jitter(child,4) ~ parent, galton)
regrline -> lm(child ~ parent, galton)
regrline -> lm(child ~ parent, galton)
e -> 2
regrline <- lm(child ~ parent, galton)
abline(regrline, lw=3, col='red')
abline(regrline, lw=3, col='red')
abline(regrline, lwd=3, col='red')
summary(regrline)
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~parent, galton)
fit$residuals
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var()
0
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, sum(varRes, varEst))
all.equal(varChild, varRes+ varEst)
efit <- lm(accel ~ mag+dist, attenu)
var(efit$residuals)
mean(efit$residuals)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
library(swirl)
swirl
swirl()
0
bye
bye()
swirl()
cor(gpa_nor, gpc_nor)
cor(gpa_nor, gch_nor)
cor(gpa, gch)
swirl()
l_nor <- lm(gch_nor ~ gpa_nor)
library(swirl)
swirl()
library(swirl)
swirl()
fit <- lm(child ~ parent, galton)
sum(fit$residuals^2)/(n-2)
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu) ^ 2)
sRes <- sqrt(deviance(fit)/(n-2))
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$child, galton$parents) ^ 2
cor(child, parents, galton) ^ 2
cor(galton$child, galton$parents)
cor(galton$child, galton$parent)
cor(galton$child, galton$parent) ^ 2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
head(trees)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training, geom="density")
R CMD check --help
getClass(show)
getClass("show")
getMethod("show")
getS3Method("show")
getS3method("show")
showMethods("show")
getClass("numeric")
getMethod("shows")
getMethod("plot")
getMethod("show")
source('~/.active-rstudio-document', echo=TRUE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
source('~/.active-rstudio-document', echo=TRUE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
source('~/.active-rstudio-document', echo=TRUE)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
View(trainIndex)
source('~/.active-rstudio-document', echo=TRUE)
plot(mixtures$CompressiveStrength, inTrain)
View(mixtures)
plot(mixtures$CompressiveStrength)
View(mixtures)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g = 4)
cutAge <- cut2(training$Age, g = 4)
cutFlyAsh <- cut2(training$FlyAsh, g = 4)
cutSuperplasticizer <- cut2(training$Superplasticizer, g = 4)
cutCement <- cut2(training$Cement, g = 4)
cutWater <- cut2(training$Water, g = 4)
cutCoarseAggregate <- cut2(training$CoarseAggregate, g = 4)
cutFineAggregate <- cut2(training$FineAggregate, g = 4)
featurePlot(y=training$CompressiveStrength, x=training[,c("Age", "FlyAsh")], plot="pairs")
qq <- qplot(CompressiveStrength,FlyAsh, data=training)
qq + geom_smooth(method='lm', formula=y~x)
library(caret)
library(Hmisc)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g = 4)
cutAge <- cut2(training$Age, g = 4)
cutFlyAsh <- cut2(training$FlyAsh, g = 4)
cutSuperplasticizer <- cut2(training$Superplasticizer, g = 4)
cutCement <- cut2(training$Cement, g = 4)
cutWater <- cut2(training$Water, g = 4)
cutCoarseAggregate <- cut2(training$CoarseAggregate, g = 4)
cutFineAggregate <- cut2(training$FineAggregate, g = 4)
with(training, plot(CompressiveStrength, col=cutAge))
with(training, plot(CompressiveStrength, col=cutFlyAsh))
with(training, plot(CompressiveStrength, col=cutCement))
with(training, plot(CompressiveStrength, col=cutWater))
with(training, plot(CompressiveStrength, col=cutCoarseAggregate))
with(training, plot(CompressiveStrength, col=cutFineAggregate))
with(training, plot(CompressiveStrength, col=cutSuperplasticizer))
with(training, plot(CompressiveStrength, col=cutCompressiveStrength))
qplot(cutFlyAsh, CompressiveStrength, data=training, col=cutFlyAsh)
qplot(training$CompressiveStrength, col=cutFlyAsh)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g = 4)
cutAge <- cut2(training$Age, g = 4)
cutFlyAsh <- cut2(training$FlyAsh, g = 4)
cutSuperplasticizer <- cut2(training$Superplasticizer, g = 4)
cutCement <- cut2(training$Cement, g = 4)
cutWater <- cut2(training$Water, g = 4)
cutCoarseAggregate <- cut2(training$CoarseAggregate, g = 4)
cutFineAggregate <- cut2(training$FineAggregate, g = 4)
featurePlot(y=training$CompressiveStrength, x=training[,c("Age", "FlyAsh")], plot="pairs")
qq <- qplot(CompressiveStrength,FlyAsh, data=training)
qq + geom_smooth(method='lm', formula=y~x)
qq <- qplot(CompressiveStrength,Age, data=training)
qq + geom_smooth(method='lm', formula=y~x)
qq <- qplot(CompressiveStrength,data=training)
qq
par(mfrow=c(2,1))
plot(training$CompressiveStrength, type="l")
plot(training$FlyAsh, type="l")
plot(training$Age, type="l")
plot(training$Superplasticizer, type="l")
plot(training$Cement, type="l")
plot(training$Water, type="l")
plot(training$CoarseAggregate, type="l")
plot(training$FineAggregate, type="l")
with(training, plot(CompressiveStrength, col=cutAge))
with(training, plot(CompressiveStrength, col=cutFlyAsh))
with(training, plot(CompressiveStrength, col=cutCement))
with(training, plot(CompressiveStrength, col=cutWater))
with(training, plot(CompressiveStrength, col=cutCoarseAggregate))
with(training, plot(CompressiveStrength, col=cutFineAggregate))
with(training, plot(CompressiveStrength, col=cutSuperplasticizer))
with(training, plot(CompressiveStrength, col=cutCompressiveStrength))
qplot(cutFlyAsh, CompressiveStrength, data=training, col=cutFlyAsh)
qplot(training$CompressiveStrength, col=cutFlyAsh)
q <- qplot(CompressiveStrength, FlyAsh, data=training)
q + geom_smooth(method='lm', formula=y~x)
cutCompressiveStrength <- cut2(training$CompressiveStrength, g = 4)
cutAge <- cut2(training$Age, g = 4)
cutFlyAsh <- cut2(training$FlyAsh, g = 4)
cutSuperplasticizer <- cut2(training$Superplasticizer, g = 4)
cutCement <- cut2(training$Cement, g = 4)
cutWater <- cut2(training$Water, g = 4)
cutCoarseAggregate <- cut2(training$CoarseAggregate, g = 4)
cutFineAggregate <- cut2(training$FineAggregate, g = 4)
featurePlot(y=training$CompressiveStrength, x=training[,c("Age", "FlyAsh")], plot="pairs")
qq <- qplot(CompressiveStrength,FlyAsh, data=training)
qq + geom_smooth(method='lm', formula=y~x)
qq <- qplot(CompressiveStrength,Age, data=training)
qq + geom_smooth(method='lm', formula=y~x)
qq <- qplot(CompressiveStrength,data=training)
qq
par(mfrow=c(2,1))
plot(training$CompressiveStrength, type="l")
plot(training$FlyAsh, type="l")
plot(training$Age, type="l")
plot(training$Superplasticizer, type="l")
plot(training$Cement, type="l")
plot(training$Water, type="l")
plot(training$CoarseAggregate, type="l")
plot(training$FineAggregate, type="l")
with(training, plot(CompressiveStrength, col=cutAge))
with(training, plot(CompressiveStrength, col=cutFlyAsh))
with(training, plot(CompressiveStrength, col=cutCement))
with(training, plot(CompressiveStrength, col=cutWater))
with(training, plot(CompressiveStrength, col=cutCoarseAggregate))
with(training, plot(CompressiveStrength, col=cutFineAggregate))
with(training, plot(CompressiveStrength, col=cutSuperplasticizer))
with(training, plot(CompressiveStrength, col=cutCompressiveStrength))
with(training, plot(CompressiveStrength, col=cutAge))
with(training, plot(CompressiveStrength, col=cutFlyAsh))
with(training, plot(CompressiveStrength, col=cutCement))
with(training, plot(CompressiveStrength, col=cutWater))
with(training, plot(CompressiveStrength, col=cutCoarseAggregate))
with(training, plot(CompressiveStrength, col=cutFineAggregate))
with(training, plot(CompressiveStrength, col=cutSuperplasticizer))
with(training, plot(CompressiveStrength, col=cutCompressiveStrength))
with(training, plot(CompressiveStrength, col=cutAge))
with(training, plot(CompressiveStrength, col=cutFlyAsh))
with(training, plot(CompressiveStrength, col=cutCement))
with(training, plot(CompressiveStrength, col=cutWater))
with(training, plot(CompressiveStrength, col=cutCoarseAggregate))
with(training, plot(CompressiveStrength, col=cutFineAggregate))
with(training, plot(CompressiveStrength, col=cutSuperplasticizer))
with(training, plot(CompressiveStrength, col=cutCompressiveStrength))
with(training, plot(CompressiveStrength, col=cutAge))
par(mfrow=c(4,2))
with(training, plot(CompressiveStrength, col=cutAge))
with(training, plot(CompressiveStrength, col=cutFlyAsh))
with(training, plot(CompressiveStrength, col=cutCement))
with(training, plot(CompressiveStrength, col=cutWater))
with(training, plot(CompressiveStrength, col=cutCoarseAggregate))
with(training, plot(CompressiveStrength, col=cutFineAggregate))
with(training, plot(CompressiveStrength, col=cutSuperplasticizer))
with(training, plot(CompressiveStrength, col=cutCompressiveStrength))
par(mfrow=c(4,2))
par(mfrow=c(4,2))
with(training, plot(CompressiveStrength, col=cutAge))
with(training, plot(CompressiveStrength, col=cutFlyAsh))
with(training, plot(CompressiveStrength, col=cutCement))
with(training, plot(CompressiveStrength, col=cutWater))
with(training, plot(CompressiveStrength, col=cutCoarseAggregate))
with(training, plot(CompressiveStrength, col=cutFineAggregate))
with(training, plot(CompressiveStrength, col=cutSuperplasticizer))
with(training, plot(CompressiveStrength, col=cutCompressiveStrength))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
qplot(Superplasticizer, data=training, geom="density")
Superplasticizer
Superplasticizer
training$Superplasticizer
qplot(log10(Superplasticizer), data=training, geom="density")
testing = adData[-inTrain,]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
l1 <- grep("IL", names(training))
n <- names(testing)
smallTraining <- training[, n[l1]]
##preProc<-preProcess(smallTraining[,-1],method="pca")
##trainPC<-predict(preProc,smallTraining[,-1])
smallTraining.pca <- prcomp(smallTraining, scale.=TRUE)   ## perform PCA on data, use scaling as well as centering
# this procedure also returns the std. deviation for each principal component in a vector
# this vector, when squared, gives variances, which add up to the original data variance
var.vector <- smallTraining.pca$sdev^2                 ## vector of variance for each PC
relative.var <- var.vector/sum(var.vector)  ## divide all by the total variance to get the share for each
relative.var           ## show variance explained by each component
cumsum(relative.var)   ## show the variance explained by first X components (cumulative sum)
source('~/.active-rstudio-document', echo=TRUE)
View(training)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training <- training[c(1,58:69)]
testing <-testing[c(1,58:69)]
View(training)
g1 <- train(training$diagnosis~., data=training, method="glm")
confusionMatrix(testing$diagnosis, predict(g1, testing))
preProc <- preProcess(training[,-1], method="pca", thresh=0.8)
trainPC<-predict(preProc, training[,-1])
testPC<-predict(preProc, testing[,-1])
g2 <- train(training$diagnosis~., data=trainPC, method="glm")
confusionMatrix(testing$diagnosis, predict(g2, testPC))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
l1 <- grep("IL", names(training))
n <- names(testing)
smallTraining <- training[, n[l1]]
##preProc<-preProcess(smallTraining[,-1],method="pca")
##trainPC<-predict(preProc,smallTraining[,-1])
smallTraining.pca <- prcomp(smallTraining, scale.=TRUE)   ## perform PCA on data, use scaling as well as centering
# this procedure also returns the std. deviation for each principal component in a vector
# this vector, when squared, gives variances, which add up to the original data variance
var.vector <- smallTraining.pca$sdev^2                 ## vector of variance for each PC
relative.var <- var.vector/sum(var.vector)  ## divide all by the total variance to get the share for each
relative.var           ## show variance explained by each component
cumsum(relative.var)   ## show the variance explained by first X components (cumulative sum)
source('~/.active-rstudio-document', echo=TRUE)
View(segmentationOriginal)
View(segmentationOriginal)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.75, list = FALSE)
training <- segmentationOriginal[inTrain,]
training <- segmentationOriginal[-inTrain,]
set.seed(125)
test_set = subset(segmentationOriginal, Case == "Test");
train_set = subset(segmentationOriginal, Case == "Train");
modFit<-train(Class~.,method="rpart", training)
print(modFit$finalModel
print(modFit$finalModel)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
View(training)
View(test_set)
modFit$finalModel
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.75, list = FALSE)
training <- segmentationOriginal[inTrain,]
training <- segmentationOriginal[-inTrain,]
set.seed(125)
test_set = subset(segmentationOriginal, Case == "Test");
train_set = subset(segmentationOriginal, Case == "Train");
modFit<-train(Class~.,method="rpart", train_set)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel,use.n=TRUE,all=TRUE,CEX=0.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
R.studio()
R.version()
update.packages(checkBuilt=TRUE, ask=FALSE)
setwd("C:/Users/Luchy/Desktop/Coursera/Practical machine learning")
