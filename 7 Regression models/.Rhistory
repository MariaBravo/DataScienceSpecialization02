x <- c(1:22)
x1 <- seq.int(10,0,-1)
x2 <- seq.int(1,11)
x <- c(1:22)
x[c(1:11)] <- x1
x[c(12:22)] <- x2
x
? diag
diag(x)
diag(abs(seq.int(-11, 11)))
diag(x=1,20,21)
l <- list(
first = 1,
second = 2,
third = list(
alpha = 3.1,
beta = 3.2
)
)
l[1:2]
l[1:5]
l[1:3]
z <- c(x1,x2)
z
? square
? squared
apropos("squared")
apropos("square")
sqrt(4)
sqrt(4.2)
isint
apropos("is integer")
?? integer
is(sqrt(4.25), int)
is(sqrt(4.25), integer)
is(sqrt(4.25), "integer")
is(sqrt(c(0:10)), "integer")
sqrt(c(0:10)
sqrt(c(0:10))
is(sqrt(c(0:10)), "integer")
x1 <- sqrt(c(0:10))
x2 <- sqrt(c(10:19))
x3 <- sqrt(c(20:29))
x4 <- sqrt(c(30:39))
x5 <- sqrt(c(40:49))
x6 <- sqrt(c(50:59))
x7 <- sqrt(c(60:69))
x8 <- sqrt(c(70:79))
x9 <- sqrt(c(80:89))
x10 <- sqrt(c(90:99))
is(sqrt(c(0:10)), "integer")
? mod
is(1.0000), "integer")
is(1.0000, "integer")
X <- c(x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
X
x <- 0:99
sqrt_x <- sqrt(x)
is_square_number <- sqrt_x == floor(sqrt_x)
square_numbers <- x[is_square_number]
x
sqrt_x
is_square_number
square_numbers
iris
iris_numeric <- iris[,1:4]
iris_numeric
iris_numeric <- iris[c("c1","c2","c3","c4"),1:4]
iris_numeric
iris_numeric <- iris[,1:4]
iris_numeric <- iris[1:4,1:4]
iris_numeric
iris_numeric <- iris[1:50,1:4]
iris_numeric
col_means(iris_numeric)
colMeans(iris_numeric)
beaver1
beaver2
beaver1$id <- 1
beaver2$id <- 3
beaver2$id <- 2
both_beavers <- rbind(beaver1, beaver2)
both_beavers
both_beavers2 <- cbind(beaver1, beaver2)
subset(both_beavers, as.logical(activ))
q()
ls
environment
multiples_of_pi <- new.env()
multiples_of_pi[ ["two_pi"] ] <- 2 * pi
multiples_of_pi[["two_pi"]] <- 2 * pi
multiples_of_pi$three_pi <- 3 * pi
assign("four_pi", 4 * pi, multiples_of_pi)
ls(multiples_of_pi)
ls_even <- function(x)(x %% 2) == 0
ls_even(c(-5:5, Inf, -Inf, NA, NaN))
x <- (1:15) ^ 2
toString(x)
toString(x, width=40)
pow <- 1:3
(powers_of_e <- exp(pow))
formatC(pi, digits = 16)
format(pi, digits = 16)
prettyNum(pi, digits = 16)
Split these strings into words, removing any commas or hyphens:
x <- c(
"Swan swam over the pond, Swim swan swim!",
"Swan swam back again - Well swum swan!"
)
[5]
"Swan swam over the pond, Swim swan swim!",
x <- c("Swan swam over the pond, Swim swan swim!","Swan swam back again - Well swum swan!")
x
strsplit(x, ",? -? ?")
strsplit(x, ",")
strsplit(x, " ")
?? sample
three_d6 <- function(n)
{
random_numbers <- matrix(
sample(6, 3 * n, replace = TRUE),
nrow = 3
)
colSums(random_numbers)
}
three_d6(1)
three_d6(2)
three_d6(3)
three_d6(4)
three_d6(5)
three_d6(6)
three_d6(1000)
scores <- three_d6(1000)
? cut
scores
cut(scores)
cut(scores, c(11,12))
cut(scores, c(1,2,3,4,5,6,7,8,9,10,11,12))
cut(scores, c(3,5,8,12,15,17,18))
cut(scores, c(3,4,5,8,12,15,17,18))
cut(scores, c(2,3,4,5,8,12,15,17,18))
cut(scores, c(2,3,4,5,8,12,15,17,18))
cut(scores, c(2,3,5,8,12,15,17,18))
cut(scores, c(3,4,5,8,12,15,17,18), labels=-3:3)
table(bonuses)
table(bonus)
bonuses <-cut(scores, c(3,4,5,8,12,15,17,18), labels=-3:3)
table(bonus)
table(bonuses)
bonuses <-cut(scores, c(2,3,5,8,12,15,17,18), labels=-3:3)
table(bonuses)
count(bonuses)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
count(bonuses)
two_d6 <- function(n)
{
random_numbers <- matrix(
sample(6, 2 * n, replace = TRUE),
nrow = 2
)
colSums(random_numbers)
}
two_d6(2)
two_d6(4)
q()
apropos("head")
?? head
prime_factors <- list(
two = 2,
three = 3,
four = c(2, 2),
five = 5,
six = c(2, 3),
seven = 7,
eight = c(2, 2, 2),
nine = c(3, 3),
ten = c(2, 5)
)
prime_factors
head(prime_factors)
?? unique
r_files <- dir(pattern = "\\.R$")
lapply(r_files, source)
r_files <- dir(pattern = "\\.exe$")
lapply(r_files, source)
r_files <- dir(pattern = "\.exe$")
r_files <- dir(pattern = "\\.exe$")
lapply(r_files, source)
r_files
wayans <- list(
"Dwayne Kim" = list(),
"Keenen Ivory" = list(
"Jolie Ivory Imani",
"Nala",
"Keenen Ivory Jr",
"Bella",
"Daphne Ivory"
),
Damon = list(
"Damon Jr",
"Michael",
"Cara Mia",
"Kyla"
),Kim = list(),
Shawn = list(
"Laila",
"Illia",
"Marlon"
),
Marlon = list(
"Shawn Howell",
"Arnai Zachary"
),
Nadia = list(),
Elvira = list(
"Damien",
"Chaunté"
),
Diedre = list(
"Craig",
"Gregg",
"Summer",
"Justin",
"Jamel"
),
Vonnie = list()
)
vapply(wayans, length, integer(1))
state.x77
?state.x77
str(state.x77)
head(state.x77)
class(state.x77)
apply(state.x77,2)
mean
apply(state.x77,mean, 2)
apply(state.x77,mean)
apply(mean, state.x77)
? apply
apply(mean, 2, state.x77)
apply(state.x77,2,mean)
apply(state.x77,2,std)
apropos
apropos standard
apropos std
apply(state.x77,2,sd)
apply(state.x77,2,mean)
apply(state.x77,2,sd)
commute_times <- replicate(1000, time_for_commute())
time_for_commute <- function()
{
#Choose a mode of transport for the day
mode_of_transport <- sample(
c("car", "bus", "train", "bike"),
size = 1,
prob = c(0.1, 0.2, 0.3, 0.4)
)
#Find the time to travel, depending upon mode of transport
time <- switch(
mode_of_transport,
car = rlnorm(1, log(30), 0.5),
bus = rlnorm(1, log(40), 0.5),
train = rnorm(1, 30, 10),
bike = rnorm(1, 60, 5)
)
names(time) <- mode_of_transport
time
}
commute_times <- replicate(1000, time_for_commute())
commute_times
commute_data <- data.frame(
time = commute_times,
mode = names(commute_times)
)
commute_data
with(commute_data, tapply(time, mode, quantile, prob = 0.75))
ddply(commute_data, .(mode), summarize, time_p75 = quantile(time, 0.75))
library(lattice)
dotplot(
variety ~ yield | site,
data = barley,
groups = year
)
search()
installed.packages
installed.packages()
View(installed.packages())
R.home("library")
.leap.seconds
in_string <- c("1940-07-07", "1940-10-09", "1942-06-18", "1943-02-25")
(parsed <- strptime(in_string, "%Y-%m-%d"))
tzfile <- file.path(R.home("share"), "zoneinfo", "zone.tab")
tzones <- read.delim(
tzfile,
row.names = NULL,
header = FALSE,
col.names = c("country", "coords", "name", "comments"),
as.is = TRUE,
fill = TRUE,
comment.char = "#"
)
View(tzones)
subset
subset(tzones)
zodiac_sign <- function(x)
{
month_x <- month(x, label = TRUE)
day_x <- day(x)
switch(
month_x,
Jan = if(day_x < 20) "Capricorn" else "Aquarius",
Feb = if(day_x < 19) "Aquarius" else "Pisces",
Mar = if(day_x < 21) "Pisces" else "Aries",
Apr = if(day_x < 20) "Aries" else "Taurus",
May = if(day_x < 21) "Taurus" else "Gemini",
Jun = if(day_x < 21) "Gemini" else "Cancer",
Jul = if(day_x < 23) "Cancer" else "Leo",
Aug = if(day_x < 23) "Leo" else "Virgo",
Sep = if(day_x < 23) "Virgo" else "Libra",
Oct = if(day_x < 23) "Libra" else "Scorpio",
Nov = if(day_x < 22) "Scorpio" else "Sagittarius",
Dec = if(day_x < 22) "Sagittarius" else "Capricorn"
)
}
nicolaus_copernicus_birth_date <- as.Date("1473-02-19")
zodiac_sign(nicolaus_copernicus_birth_date)
nicolaus_copernicus_birth_date
month(nicolaus_copernicus_birth_date)
library(lubridate)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
? lubridate
?? lubridate
library(lubridate)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(lubridate)
zodiac_sign(nicolaus_copernicus_birth_date)
data()
data("kidney", package = "survival")
head(kidney)
kidney
q()
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("ggplot2","devtools")
install.packages("slidify")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(ggplot2)
search()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
rm(list=ls(all=TRUE))
library(swirl)  # Loads swirl
swirl()  # Runs swirl
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
q()
rm(list=ls(all=TRUE))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "cameras.csv")
download.file(fileUrl, destfile = "cameras.csv",  method="curl")
SetInternet2(TRUE)
SetInternet2(TRUE)
setInternet2(TRUE)
download.file(fileUrl, destfile = "cameras.csv")
dir()
ls
list.files()
getwd()
download.file(fileUrl, destfile = "cameras.csv")
ls
dir
dir()
dateDownloaded <- date()
dateDownloaded
download.file(fileUrl, destfile = "housing.csv")
dateDownloaded <- date()
dateDownloaded
ls()
dir()
housingData <- read.table("housing.csv")
housingData
head(housingData)
housingData <- read.table("housing.csv", sep=",", header=TRUE)
head(housingData)
housingData$VAL > 1000000
good <- housingData$VAL > 1000000
housingData[good]
housingData$VAL[good]
DVAL <- dataHousing[VAL]
hVAL <- housingData[VAL]
head(housingData)
hVAL <- housingData[VAL]
names(housingData)
hVAL <- housingData[VAL]
hVAL <- housingData$VAL
hVAL
bad <- is.na(hVAL)
hVAL[!bad]
hVAL[!bad]
hVAL2 <- hVAL[!bad]
hVAL2 == 24
hVAL3 <- hVAL2 == 24
hVAL
hVAL3
hVAL3 <- hVAL2[hVAL2 == 24]
hVAL3
? rows
? row()
row(hVAL3)
? count
? count()
? freq
? freq()
? frequency
housingData$FES
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl2, destfile = "gas.csv")
library(xlsx)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
utils:::menuInstallPkgs()
library(xlsx)
utils:::menuInstallPkgs()
library(xlsx)
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
q()
setwd("C:/Users/Luchy/Desktop/Coursera/Regression models")
library(knitr)
filen <- "projectCarsv04"
knit(paste0(filen,".md"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
library(knitr)
filen <- "projectmtCars"
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
filen <- "projectmtCars"
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
dataT <- mtcars
dataT$cyl <- factor(dataT$cyl)
dataT$vs <- factor(dataT$vs)
dataT$am <- factor(dataT$am)
dataT$gear <- factor(dataT$gear)
dataT$carb <- factor(dataT$carb)
null = lm(mpg ~ 1, data = dataT);
full = lm(mpg ~ ., data = dataT);
forward <- step(null, scope=list(lower=null, upper=full),
direction="forward", trace=FALSE);
backward <- step(full, data=dataT, direction="backward", trace=FALSE);
stepwise <- step(null, scope = list(upper=full), data= dataT,
direction="both", trace=FALSE);
null = lm(mpg ~ 1, data = mtcars);
full = lm(mpg ~ ., data = mtcars);
forward <- step(null, scope=list(lower=null, upper=full),
direction="forward");
backward <- step(full, data=mtcars, direction="backward");
stepwise <- step(null, scope = list(upper=full), data= mtcars,
direction="both");
null = lm(mpg ~ 1, data = dataT);
full = lm(mpg ~ ., data = dataT);
stepwise <- step(null, scope = list(upper=full), data= dataT,
direction="both", trace=TRUE);
backward <- step(full, data=dataT, direction="backward", trace=TRUE);
null = lm(mpg ~ 1, data = mtcars);
full = lm(mpg ~ ., data = mtcars);
forward <- step(null, scope=list(lower=null, upper=full),
direction="forward");
backward <- step(full, data=mtcars, direction="backward");
stepwise <- step(null, scope = list(upper=full), data= mtcars,
direction="both");
filen <- "projectmtCars"
system(paste0("pandoc -s -V geometry:margin=1in ", paste0(filen,".md"), " -t latex -o  ", paste0(filen,".pdf"), " --highlight-style=tango -S"))
